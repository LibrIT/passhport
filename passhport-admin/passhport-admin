#!/usr/bin/env python
# -*-coding:Utf-8 -*-

"""paSSHport-admin

Usage:
    passhport-admin (-i | --interactive)
    passhport-admin (-h | --help)
    passhport-admin user list
    passhport-admin user search [<pattern>]
    passhport-admin user show [<name>]
    passhport-admin user create [((<name> <sshkey>) \
[--comment=<comment>])]
    passhport-admin user edit [(<name> [--newname=<name>] \
[--newsshkey=<sshkey>] [--newcomment=<comment>])]
    passhport-admin user delete [([-f | --force] <name>)]
    passhport-admin user toggleadmin [<name>] 
    passhport-admin target list
    passhport-admin target search [<pattern>]
    passhport-admin target checkaccess [<pattern>]
    passhport-admin target show [<name>]
    passhport-admin target create [((<name> <hostname>) [--login=<login>] \
[--type=<ssh>] [--comment=<comment>] [--changepwd=<yes|no>] [--sshoptions=<sshoptions>] \
[--port=<port>] [--sessiondur=<sessiondur>])]
    passhport-admin target edit [(<name> [--newname=<name>] \
[--newhostname=<hostname>] [--newtype=<ssh>] [--newlogin=<login>] [--newchangepwd=<yes|no>] \
[--newcomment=<comment>] [--newsshoptions=<sshoptions>] [--newport=<port>] \
[--sessiondur=<sessiondur>]) ]
    passhport-admin target (adduser | rmuser) \
[(<username> <targetname>)]
    passhport-admin target (addusergroup | rmusergroup) \
[(<usergroupname> <targetname>)]
    passhport-admin target delete [([-f | --force] <name>)]
    passhport-admin usergroup list
    passhport-admin usergroup search [<pattern>]
    passhport-admin usergroup show [<name>]
    passhport-admin usergroup create [(<name> [--comment=<comment>])]
    passhport-admin usergroup edit [(<name> [--newname=<name>] \
[--newcomment=<comment>])]
    passhport-admin usergroup (adduser | rmuser) \
[(<username> <usergroupname>)]
    passhport-admin usergroup (addusergroup | rmusergroup) \
[(<subusergroupname> <usergroupname>)]
    passhport-admin usergroup delete [([-f | --force] <name>)]
    passhport-admin targetgroup list
    passhport-admin targetgroup search [<pattern>]
    passhport-admin targetgroup show [<name>]
    passhport-admin targetgroup create [(<name> [--comment=<comment>])]
    passhport-admin targetgroup edit [(<name> [--newname=<name>] \
[--newcomment=<comment>])]
    passhport-admin targetgroup (adduser | rmuser) \
[(<username> <targetgroupname>)]
    passhport-admin targetgroup (addtarget | rmtarget) \
[(<targetname> <targetgroupname>)]
    passhport-admin targetgroup (addusergroup | rmusergroup) \
[(<usergroupname> <targetgroupname>)]
    passhport-admin targetgroup (addtargetgroup | rmtargetgroup) \
[(<subtargetgroupname> <targetgroupname>)]
    passhport-admin targetgroup delete [([-f | --force] <name>)]

Arguments:
    name                The name of the object.
    username            The name of the user.
    targetname          The name of the target.
    usergroupname       The name of the usergroup.
    subusergroupname    The name of the subusergroup.
    targetgroupname     The name of the targetgroup.
    subtargetgroupname  The name of the subtargetgroup.
    comment             A comment about the object.
    pattern             A SQL search pattern. For checkaccess, can be \
hostname or targetname
    sshkey              The SSH key used to authenticate the user.
    hostname            The name of the server of the target.
    login               Login used to log on the target.
    sshoptions          Options used in the case of a scp or ssh connection.
    port                The port used to connect with the target.

Options:
    -i, --interactive               Interactive mode.
    -h, --help                      Show this screen and exit.
    -f, --force                     Force deletion without asking \
confirmation.
    --comment=<comment>             Set a comment to the object.
    --sshoptions=<sshoptions>       Set SSH options to the target.
    --port=<port>                   Set port used to connect with \
the target.
    --sessiondur=<sessiondur>       Set the session duration in minutes for \
when supported.
    --newname=<name>                Set the new name of the object.
    --newcomment=<comment>          Set the new comment of the object.
    --newsshkey=<sshkey>            Set the new SSH key of the user.
    --newhostname=<hostname>        Set the new hostname of the target.
    --newlogin=<login>              Set the new login of the target.
    --newsshoptions=<sshoptions>    Set the new SSH options \
of the target.
    --newport=<port>                Set the new port used \
    --newsessiondur=<sessiondur>    Set the new session duration in minutes for \
when supported.

with the target.
"""

# Compatibility 2.7-3.4
from __future__ import absolute_import
from __future__ import unicode_literals

import signal
import sys
import cmd

from manager import (prompt_functions, requests_functions, user, target,
usergroup, targetgroup)

from docopt import docopt, DocoptExit


def signal_handler(signal, frame):
    print("\nExiting at your own sweet will.")
    sys.exit(0)


def docopt_cmd(func):
    """This decorator is used to simplify the try/except block and pass
    the result of the docopt parsing to the called action.
    """

    def fn(self, arg):
        try:
            opt = docopt(fn.__doc__, arg)

        except DocoptExit as e:
            # The DocoptExit is thrown when the args do not match.
            # We print a message to the user and the usage block.
            print("Invalid command!")
            print(e)

            return None

        except SystemExit:
            # The SystemExit exception prints the usage for --help
            # We do not need to do the print here.
            return None

        return func(self, opt)

    fn.__name__ = func.__name__
    fn.__doc__ = func.__doc__
    fn.__dict__.update(func.__dict__)

    return fn


class MyInteractive(cmd.Cmd):
    intro = "Welcome to the interactive program" + \
        " (type help for a list of commands)!"
    prompt = "(passhport) "
    file = None

    def method(self, argitems):
        for key, value in argitems():
            if value:
                return key
        return False

    @docopt_cmd
    def do_user(self, arg):
        """
Usage:
    user list
    user search
    user show
    user create
    user edit 
    user delete
    user toggleadmin
        """
        getattr(prompt_functions, self.method(arg.items))("user")


    @docopt_cmd
    def do_target(self, arg):
        """
Usage:
    target list
    target search
    target checkaccess
    target show
    target create
    target edit 
    target adduser
    target rmuser
    target addusergroup
    target rmusergroup
    target delete
        """
        getattr(prompt_functions, self.method(arg.items))("target")


    @docopt_cmd
    def do_usergroup(self, arg):
        """
Usage:
    usergroup list
    usergroup search
    usergroup show
    usergroup create
    usergroup edit
    usergroup adduser
    usergroup rmuser
    usergroup addusergroup
    usergroup rmusergroup
    usergroup delete
        """
        getattr(prompt_functions, self.method(arg.items))("usergroup")


    @docopt_cmd
    def do_targetgroup(self, arg):
        """
Usage:
    targetgroup list
    targetgroup search
    targetgroup show
    targetgroup create
    targetgroup edit
    targetgroup adduser 
    targetgroup rmuser
    targetgroup addtarget
    targetgroup rmtarget
    targetgroup addusergroup
    targetgroup rmusergroup
    targetgroup addtargetgroup
    targetgroup rmtargetgroup
    targetgroup delete 
        """
        getattr(prompt_functions, self.method(arg.items))("targetgroup")


    def do_quit(self, arg):
        """Quit Interactive Mode."""
        print("Goodbye!")
        exit()


def requests_object_method(opt):
    """Call the right method depending of the object type"""
    objects = {"user", "target", "usergroup", "targetgroup"}
    methods = {"list", "search", "checkaccess", "show", "delete", "create", "edit",
               "adduser", "rmuser", "addusergroup", "rmusergroup", "toggleadmin",
               "addtarget", "rmtarget", "addtargetgroup", "rmtargetgroup"}
    param = {}

    # Determine which object/method to use
    # And build a list of list containing all parameters
    for key, value in opt.items():
        if key in objects:
            obj = key
        elif key in methods:
            method = key
        else:
            param[key] = value

    if param:
        # All info are here nothing to ask to the user
        getattr(requests_functions, method)(obj, param)
    else:
        # Need more info, lets prompt user
        getattr(prompt_functions, method)(obj)


opt = docopt(__doc__, sys.argv[1:])

if __name__ == "__main__":
    signal.signal(signal.SIGINT, signal_handler)

    if opt["--interactive"]:
        MyInteractive().cmdloop()
    else:
        # We don't need the False options to call the method
        options = {key: value for key, value in opt.items() if value}
        requests_object_method(options)
