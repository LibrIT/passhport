#!/usr/bin/env python
# -*-coding:Utf-8 -*-

"""
Usage:
    passhport-admin (-i | --interactive)
    passhport-admin user list
    passhport-admin user search <pattern>
    passhport-admin user (show|create|edit|del)
    passhport-admin user show <email>
    passhport-admin user create <email> <comment> <sshkey>
    passhport-admin user edit <email> <new_email> <comment> <sshkey>
    passhport-admin user del <email>
    passhport-admin usergroup list
    passhport-admin usergroup search <pattern>
    passhport-admin usergroup (show|create|edit|del)
    passhport-admin usergroup (adduser|rmuser) <email> <groupname>
    passhport-admin usergroup (addusergroup|rmusergroup) <subusergroupname> <groupname>
    passhport-admin target list
    passhport-admin target search <pattern>
    passhport-admin target (show|create|edit|del)
    passhport-admin target (adduser|rmuser) <email> <targetname>
    passhport-admin target (addusergroup|rmusergroup) <groupname> <targetname>
    passhport-admin targetgroup list
    passhport-admin targetgroup search <pattern>
    passhport-admin targetgroup (show|create|edit|del)
    passhport-admin targetgroup (addtarget|rmtarget) <targetname> <targetgroupname>
    passhport-admin targetgroup (addtargetgroup|rmtargetgroup) <subtargetgroupname> <targetgroupname>
    passhport-admin targetgroup (adduser|rmuser) <email> <targetgroupname>
    passhport-admin targetgroup (addusergroup|rmusergroup) <groupname> <targetgroupname>
    passhport-admin (-h | --version)

Arguments:
    pattern         SQL search pattern
    email           An email to identify a user
    passhport-admin (-h | --version)
    comment         A comment
    sshkey          A SSH key to authenticate a user
    target          A target is a combinaison of a server and a port
    groupname       A group is a combinason of users and targets. A user in a group can access all the targets in it
    subusergroupname        Any group can be added to another group (take care to the cycles)
    targetname      The name of a target
    targetgroup     A group of targets
    targetgroupname The name of a targetgroup
    subtargetgroup  A group of targets can be added to any group of targets
    targetname      The name of a target

Options:
    user                manage users data
    usergroup           manage group of users
    -i, --interactive   Interactive Mode
    -h, --help          Show this screen and exit.
"""

import sys
import cmd

import manage_user.prompt_functions as user_prompt
import manage_user.requests_functions as user_req
import manage_target.prompt_functions as target_prompt
import manage_target.requests_functions as target_req
import manage_usergroup.prompt_functions as usergroup_prompt
import manage_usergroup.requests_functions as usergroup_req
import manage_targetgroup.prompt_functions as targetgroup_prompt
import manage_targetgroup.requests_functions as targetgroup_req

from docopt import docopt, DocoptExit


def docopt_cmd(func):
    """
    This decorator is used to simplify the try/except block and pass the result
    of the docopt parsing to the called action.
    """
    def fn(self, arg):
        try:
            opt = docopt(fn.__doc__, arg)

        except DocoptExit as e:
            # The DocoptExit is thrown when the args do not match.
            # We print a message to the user and the usage block.
            print('Invalid Command!')
            print(e)
            return

        except SystemExit:
            # The SystemExit exception prints the usage for --help
            # We do not need to do the print here.
            return

        return func(self, opt)


    fn.__name__ = func.__name__
    fn.__doc__ = func.__doc__
    fn.__dict__.update(func.__dict__)
    return fn


class MyInteractive (cmd.Cmd):
    intro = 'Welcome to interactive program!' \
        + ' (type help for a list of commands)'
    prompt = '(passhport) '
    file = None

    @docopt_cmd
    def do_user(self, arg):
        """
Usage:
    user list
    user search <pattern>
    user (show|create|edit|del)
    user show <email>
    user create <email> <comment> <sshkey>
    user edit <email> <new_email> <comment> <sshkey>
    user del <email>

Arguments:
    pattern         SQL search pattern

Options:
    list            List all users (use with care on huge installations)
    search          Search a user following the SQL pattern given
    show            Show all the data of a user
    create          Launch the interactive user creation
    edit            Launch the interactive user modification
    del             Delete permanently the user entry"""

        #TODO
        print(arg)

    @docopt_cmd
    def do_usergroup(self, arg):
        """
Usage:
    usergroup list
    usergroup search <pattern>
    usergroup (show|create|edit|del)
    usergroup (adduser|rmuser) <email> <groupname>
    usergroup (addusergroup|rmusergroup) <subusergroupname> <groupname>

Arguments:
    pattern         SQL search pattern
    username        Often the login
    target          A target is a combinaison of a server and a port
    groupname       A group is a combinaison of users and targets. A user in a group can access all the targets in it
    subusergroupname        Any group can be added to another group (take care to the cycles)

Options:
    list            List all groups
    search          Search a group name following the SQL pattern given
    show            Show all the data of a group, including the users/target in it
    create          Launch the interactive group creation
    edit            Launch the interactive group modification
    del             Delete permanently the group entry
    adduser         Add a user in a group
    rmuser          Remove a user from a group
    addgroup        Add a group of users/targets to another group
    rmgroup         Remove a group of user target from another group
    """
        #TODO
        print(arg)

    @docopt_cmd
    def do_target(self, arg):
        """
Usage:
    target list
    target search <pattern>
    target (show|create|edit|del)
    target editcommand <command> <targetname>
    target (adduser|rmuser) <email> <targetname>
    target (addusergroup|rmusergroup) <groupname> <targetname>

Arguments:
    pattern         SQL search pattern
    email           The email of a user
    targetname      Often a hostname
    groupname       A passhport group name
    command         A unix command that will be triggered instead of classical ssh connexion

Options
    list            List all targets
    search          Search a target name following the SQL pattern given
    show            Show all the data of a target
    create          Launch the interactive target creation
    edit            Launch the interactive target modification
    del             Delete permanently the target entry
    editcommand     Edit the command line launched instead of a classical ssh connexion.
    adduser         Add a user rights on target
    rmuser          Remove a user rights from target
    addusergroup    Add rights to a group of users on this target
    rmusergroup     Remove rights from a group of users on this target
    """

    @docopt_cmd
    def do_targetgroup(self, arg):
        """
Usage:
    targetgroup list
    targetgroup search <pattern>
    targetgroup (show|create|edit|del)
    targetgroup (addtarget|rmtarget) <targetname>  <targetgroupname>
    targetgroup (addtargetgroup|rmtargetgroup) <subtargetgroupname> <targetgroupname>
    targetgroup (adduser|rmuser) <email> <targetgroupname>
    targetgroup (addusergroup|rmusergroup) <groupname>  <targetgroupname>

Arguments:
    pattern         SQL search pattern
    username        Often the login
    targetname      Often a hostname
    targetgroupname A group of targets already existing
    groupname       A passhport group name

Options
    list            List all targetgroups
    search          Search a targetgroup name following the SQL pattern given
    show            Show all the data of a targetgroup
    create          Launch the interactive targetgroup creation
    edit            Launch the interactive targetgroup modification
    del             Delete permanently the targetgroup entry
    adduser         Add a user rights on targetgroup (including all the targets in it)
    rmuser          Remove a user rights from targetgroup
    addusergroup    Add rights to a group of users on this targetgroup
    rmusergroup     Remove rights from a group of users on this targetgroup
    addtargetgroup  Add a group of targets on this group
    rmtargetgroup   Remove a group of target from this group
    """

    def do_quit(self, arg):
        """Quits out of Interactive Mode."""

        print('Good Bye!')
        exit()

opt = docopt(__doc__, sys.argv[1:])

if __name__ == '__main__':
    if opt['--interactive']:
        MyInteractive().cmdloop()
    elif opt['user']:
        if opt['list']:
            user_prompt.prompt_user_list()
        elif opt['search']:
            user_prompt.prompt_user_search(opt['<pattern>'])
        elif opt['create']:
            if opt['<email>'] and opt['<comment>'] and opt['<sshkey>']:
                user_req.requests_user_create(opt['<email>'], opt['<comment>'], opt['<sshkey>'])
            else:
                user_prompt.prompt_user_create()
        elif opt['show']:
            if opt['<email>']:
                user_req.requests_user_show(opt['<email>'])
            else:
                user_prompt.prompt_user_show()
        elif opt['edit']:
            if opt['<email>'] and opt['<new_email>'] and opt['<comment>'] and opt['<sshkey>']:
                user_req.requests_user_edit(opt['<email>'], opt['<new_email>'], opt['<comment>'], opt['<sshkey>'])
            else:
                user_prompt.prompt_user_edit()
        elif opt['del']:
            if opt['<email>']:
                user_req.requests_user_del(opt['<email>'])
            else:
                user_prompt.prompt_user_del()
    elif opt['target']:
        if opt['list']:
            target_prompt.prompt_target_list()
        elif opt['search']:
            target_prompt.prompt_target_search(opt['<pattern>'])
        elif opt['create']:
            target_prompt.prompt_target_create()
        elif opt['show']:
            target_prompt.prompt_target_show()
        elif opt['edit']:
            target_prompt.prompt_target_edit()
        elif opt['del']:
            target_prompt.prompt_target_del()
        elif opt['adduser']:
            target_prompt.prompt_target_adduser(opt['<email>'], opt['<targetname>'])
        elif opt['rmuser']:
            target_prompt.prompt_target_rmuser(opt['<email>'], opt['<targetname>'])
        elif opt['addusergroup']:
            target_prompt.prompt_target_addusergroup(opt['<groupname>'], opt['<targetname>'])
        elif opt['rmusergroup']:
            target_prompt.prompt_target_rmusergroup(opt['<groupname>'], opt['<targetname>'])
    elif opt['usergroup']:
        if opt['list']:
            usergroup_prompt.prompt_usergroup_list()
        elif opt['search']:
            usergroup_prompt.prompt_usergroup_search(opt['<pattern>'])
        elif opt['create']:
            usergroup_prompt.prompt_usergroup_create()
        elif opt['show']:
            usergroup_prompt.prompt_usergroup_show()
        elif opt['edit']:
            usergroup_prompt.prompt_usergroup_edit()
        elif opt['del']:
            usergroup_prompt.prompt_usergroup_del()
        elif opt['adduser']:
            usergroup_prompt.prompt_usergroup_adduser(opt['<email>'], opt['<groupname>'])
        elif opt['rmuser']:
            usergroup_prompt.prompt_usergroup_rmuser(opt['<email>'], opt['<groupname>'])
        elif opt['addusergroup']:
            usergroup_prompt.prompt_usergroup_addusergroup(opt['<subusergroupname>'], opt['<groupname>'])
        elif opt['rmusergroup']:
            usergroup_prompt.prompt_usergroup_rmusergroup(opt['<subusergroupname>'], opt['<groupname>'])
    elif opt['targetgroup']:
        if opt['list']:
            targetgroup_prompt.prompt_targetgroup_list()
        elif opt['search']:
            targetgroup_prompt.prompt_targetgroup_search(opt['<pattern>'])
        elif opt['create']:
            targetgroup_prompt.prompt_targetgroup_create()
        elif opt['show']:
            targetgroup_prompt.prompt_targetgroup_show()
        elif opt['edit']:
            targetgroup_prompt.prompt_targetgroup_edit()
        elif opt['del']:
            targetgroup_prompt.prompt_targetgroup_del()
        elif opt['addtarget']:
            targetgroup_prompt.prompt_targetgroup_addtarget(opt['<targetname>'], opt['<targetgroupname>'])
        elif opt['rmtarget']:
            targetgroup_prompt.prompt_targetgroup_rmtarget(opt['<targetname>'], opt['<targetgroupname>'])
        elif opt['adduser']:
            targetgroup_prompt.prompt_targetgroup_adduser(opt['<email>'], opt['<targetgroupname>'])
        elif opt['rmuser']:
            targetgroup_prompt.prompt_targetgroup_rmuser(opt['<email>'], opt['<targetgroupname>'])
        elif opt['addusergroup']:
            targetgroup_prompt.prompt_targetgroup_addusergroup(opt['<groupname>'], opt['<targetgroupname>'])
        elif opt['rmusergroup']:
            targetgroup_prompt.prompt_targetgroup_rmusergroup(opt['<groupname>'], opt['<targetgroupname>'])
        elif opt['addtargetgroup']:
            targetgroup_prompt.prompt_targetgroup_addtargetgroup(opt['<subtargetgroupname>'], opt['<targetgroupname>'])
        elif opt['rmtargetgroup']:
            targetgroup_prompt.prompt_targetgroup_rmtargetgroup(opt['<subtargetgroupname>'], opt['<targetgroupname>'])
