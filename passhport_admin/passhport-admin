#!/usr/bin/env python
# -*-coding:Utf-8 -*-

"""
Usage:
    passhport-admin (-i | --interactive)
    passhport-admin user (list|delete)
    passhport-admin user search [<pattern>]
    passhport-admin user (show|delete) [<name>]
    passhport-admin user create [((<name> <sshkey>) [--comment=<comment>])]
    passhport-admin user edit [<name> [--newname=<name>] [--newsshkey=<sshkey>] [--newcomment=<comment>]]
    passhport-admin target list
    passhport-admin target search <pattern>
    passhport-admin target (show|delete) [<name>]
    passhport-admin target create [((<name> <hostname>) [--comment=<comment>] [--sshoptions=<sshoptions>] [--port=<port>] [--servretype=<servertype>] [--autocommand=<autocommand>])]
    passhport-admin target edit [<name> [--newname=<name>] \
[--newhostname=<hostname>] [--newcomment=<comment>] \
[--newsshoptions=<sshoptions>] [--newport=<port>] \
[--newservertype=<servertype>] [--newautocommand=<autocommand>]]
    passhport-admin target (adduser|rmuser) [<username> <targetname>]
    passhport-admin usergroup list
    passhport-admin usergroup search <pattern>
    passhport-admin usergroup (show|create|edit|del)
    passhport-admin usergroup (adduser|rmuser) <username> <usergroupname>
    passhport-admin usergroup (addusergroup|rmusergroup) <subusergroupname> <usergroupname>
    passhport-admin targetgroup list
    passhport-admin targetgroup search <pattern>
    passhport-admin targetgroup (show|create|edit|del)
    passhport-admin targetgroup (addtarget|rmtarget) <targetname> <targetgroupname>
    passhport-admin targetgroup (addtargetgroup|rmtargetgroup) <subtargetgroupname> <targetgroupname>
    passhport-admin targetgroup (adduser|rmuser) <username> <targetgroupname>
    passhport-admin targetgroup (addusergroup|rmusergroup) <usergroupname> <targetgroupname>
    passhport-admin (-h | --version)

Arguments:
    pattern         SQL search pattern
    email           An email to identify a user
    passhport-admin (-h | --version)
    comment         A comment
    sshkey          A SSH key to authenticate a user
    target          A target is a combinaison of a server and a port
    groupname       A group is a combinason of users and targets. A user in a group can access all the targets in it
    subusergroupname        Any group can be added to another group (take care to the cycles)
    targetname      The name of a target
    targetgroup     A group of targets
    targetgroupname The name of a targetgroup
    subtargetgroup  A group of targets can be added to any group of targets
    targetname      The name of a target

Options:
    user                manage users data
    usergroup           manage group of users
    -i, --interactive   Interactive Mode
    -h, --help          Show this screen and exit.
"""

import sys
import cmd

#import manage_user as mu
#import manage_target as mt
#import manage_usergroup as mug
#import manage_targetgroup as mtg

#from manage_user import *
#from manage_target import *
#from manage_usergroup import *
#from manage_targetgroup import *
import manager
from manager import *

from docopt import docopt, DocoptExit


def docopt_cmd(func):
    """This decorator is used to simplify the try/except block and pass
    the result of the docopt parsing to the called action.
    """

    def fn(self, arg):
        try:
            opt = docopt(fn.__doc__, arg)

        except DocoptExit as e:
            # The DocoptExit is thrown when the args do not match.
            # We print a message to the user and the usage block.
            print('Invalid Command!')
            print(e)
            return

        except SystemExit:
            # The SystemExit exception prints the usage for --help
            # We do not need to do the print here.
            return

        return func(self, opt)

    fn.__name__ = func.__name__
    fn.__doc__ = func.__doc__
    fn.__dict__.update(func.__dict__)
    return fn


class MyInteractive (cmd.Cmd):
    intro = 'Welcome to interactive program!' \
        + ' (type help for a list of commands)'
    prompt = '(passhport) '
    file = None

    @docopt_cmd
    def do_user(self, arg):
        """
Usage:
    user list
    user search <pattern>
    user (show|create|edit|delete)
    user show <email>
    user create <email> <comment> <sshkey>
    user edit <email> <new_email> <comment> <sshkey>
    user delete <email>

Arguments:
    pattern         SQL search pattern

Options:
    list            List all users (use with care on huge installations)
    search          Search a user following the SQL pattern given
    show            Show all the data of a user
    create          Launch the interactive user creation
    edit            Launch the interactive user modification
    delete             Delete permanently the user entry"""

        # TODO
        print(arg)

    @docopt_cmd
    def do_usergroup(self, arg):
        """
Usage:
    usergroup list
    usergroup search <pattern>
    usergroup (show|create|edit|del)
    usergroup (adduser|rmuser) <email> <groupname>
    usergroup (addusergroup|rmusergroup) <subusergroupname> <groupname>

Arguments:
    pattern         SQL search pattern
    username        Often the login
    target          A target is a combinaison of a server and a port
    groupname       A group is a combinaison of users and targets. A user in a group can access all the targets in it
    subusergroupname        Any group can be added to another group (take care to the cycles)

Options:
    list            List all groups
    search          Search a group name following the SQL pattern given
    show            Show all the data of a group, including the users/target in it
    create          Launch the interactive group creation
    edit            Launch the interactive group modification
    delete             Delete permanently the group entry
    adduser         Add a user in a group
    rmuser          Remove a user from a group
    addgroup        Add a group of users/targets to another group
    rmgroup         Remove a group of user target from another group
    """
        # TODO
        print(arg)

    @docopt_cmd
    def do_target(self, arg):
        """
Usage:
    target list
    target search <pattern>
    target (show|create|edit|del)
    target editcommand <command> <targetname>
    target (adduser|rmuser) <email> <targetname>
    target (addusergroup|rmusergroup) <groupname> <targetname>

Arguments:
    pattern         SQL search pattern
    email           The email of a user
    targetname      Often a hostname
    groupname       A passhport group name
    command         A unix command that will be triggered instead of classical ssh connexion

Options
    list            List all targets
    search          Search a target name following the SQL pattern given
    show            Show all the data of a target
    create          Launch the interactive target creation
    edit            Launch the interactive target modification
    delete             Delete permanently the target entry
    editcommand     Edit the command line launched instead of a classical ssh connexion.
    adduser         Add a user rights on target
    rmuser          Remove a user rights from target
    addusergroup    Add rights to a group of users on this target
    rmusergroup     Remove rights from a group of users on this target
    """

    @docopt_cmd
    def do_targetgroup(self, arg):
        """
Usage:
    targetgroup list
    targetgroup search <pattern>
    targetgroup (show|create|edit|del)
    targetgroup (addtarget|rmtarget) <targetname>  <targetgroupname>
    targetgroup (addtargetgroup|rmtargetgroup) <subtargetgroupname> <targetgroupname>
    targetgroup (adduser|rmuser) <email> <targetgroupname>
    targetgroup (addusergroup|rmusergroup) <groupname> <targetgroupname>

Arguments:
    pattern         SQL search pattern
    username        Often the login
    targetname      Often a hostname
    targetgroupname A group of targets already existing
    groupname       A passhport group name

Options
    list            List all targetgroups
    search          Search a targetgroup name following the SQL pattern given
    show            Show all the data of a targetgroup
    create          Launch the interactive targetgroup creation
    edit            Launch the interactive targetgroup modification
    delete             Delete permanently the targetgroup entry
    adduser         Add a user rights on targetgroup (including all the targets in it)
    rmuser          Remove a user rights from targetgroup
    addusergroup    Add rights to a group of users on this targetgroup
    rmusergroup     Remove rights from a group of users on this targetgroup
    addtargetgroup  Add a group of targets on this group
    rmtargetgroup   Remove a group of target from this group
    """

    def do_quit(self, arg):
        """Quits out of Interactive Mode."""

        print('Good Bye!')
        exit()


def requests_object_method(opt):
    """Call the right method depending of the object type"""
    objects = {"user", "target", "usergroup", "targetgroup"}
    methods = {'list', 'search', 'show', 'delete', 'create', 'edit',
               'adduser', 'rmuser', 'addusergroup', 'rmusergroup',
               'addtarget', 'rmtarget', 'addtargetgroup', 'rmtargetgroup'}
    param = {}

    # Determine which object/method to use
    # And build a list of list containing all parameters
    for key, value in opt.items():
        if key in objects:
            obj = key
        elif key in methods:
            method = key
        else:
            param[key] = value

    if param:
        # All info are here nothing to ask to the user
        module = manager.requests_functions
        getattr(module, method)(obj,param)
    else:
        # Need more info, lets prompt user
        module = manager.prompt_functions
        getattr(module, method)(obj)


opt = docopt(__doc__, sys.argv[1:])
if __name__ == '__main__':
    if opt['--interactive']:
        MyInteractive().cmdloop()
    else:
        # We don't need the False options to call the method
        options = {key: value for key, value in opt.items() if value}
        requests_object_method(options)
