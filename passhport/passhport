#!/usr/bin/env python
# -*- coding:Utf-8 -*-

# Compatibility 2.7-3.4
from __future__ import absolute_import
from __future__ import unicode_literals
from builtins import input
from datetime import datetime
from tabulate import tabulate

import os, sys, locale, requests, random, crypt, re, configparser, signal
import uuid, readline, glob

from connections_utils import ssh
from connections_utils import scp
from connections_utils import password
from ui_utils import completer


# Reading configuration from /etc if possible else form the script directory
conf = configparser.ConfigParser()
conffile = "passhport.ini"
if os.path.isfile("/etc/passhport/" + conffile):
    conf.read("/etc/passhport/" + conffile)
else:
    conf.read(sys.path[0] + "/" + conffile)

# SSL Configuration
SSL                = conf.getboolean("SSL", "SSL")
SSL_CERTIFICAT     = conf.get("SSL", "SSL_CERTIFICAT")
SCRIPT_LOGS_PATH   = conf.get("Environment", "SCRIPT_LOGS_PATH")

# MISC Confgiruation
SCP_THROUGH_TARGET = conf.getboolean("MISC", "SCP_THROUGH_TARGET")
UNIQ_TARGETS_ID    = conf.getboolean("MISC", "UNIQ_TARGETS_ID")
NODE_NAME          = conf.get("MISC", "NODE_NAME")
SSH_SCRIPT         = conf.get("Environment", "SSH_SCRIPT")

def signal_handler(signal, frame):
    """Handle 'ctrl-c' from the users"""
    print("\nExiting at your own sweet will.")
    sys.exit(0)


def get(url):
    """Send the GET request to the server and print a result.
       This is used to connect to passhportd, to check access"""
    try:
        if SSL:
            r = requests.get(url, verify=SSL_CERTIFICAT)
        else:
            r = requests.get(url)

    except requests.RequestException as e:
        print("ERROR: " + str(e.message))
    else:
        if r.status_code == requests.codes.ok:
            return r.text

    return 1


def post(url, data):
    """Send the POST request to the server and print a result.
       This is used to connect to passhportd, to log access"""
    try:
        if SSL:
            r = requests.post(url_passhport + url, data=data, 
                              verify=SSL_CERTIFICAT)
        else:
            r = requests.post(url_passhport + url, data=data)

    except requests.RequestException as e:
        print("ERROR: " + str(e.message))
    else:
        if r.status_code == requests.codes.ok:
            return r.text

    return 1


def checkandconnect(indexed_target_list, choice, username, originalcmd,
                    scpcmd = False):
    """Check if the user have entered an accessible target
       then check target type and launch the action"""

    # Check the target access and access type
    potential_target = False
    target_found = False
    i = 0
    while not target_found and i < len(indexed_target_list):
        line = indexed_target_list[i].split(" ")
        i = i + 1
        if len(line) > 2:
            if line[1].casefold() == choice.casefold():
                target_found = line
            if not potential_target and \
                    (line[0] == choice or line[2] == choice):
                potential_target = line

    if not target_found:
        if not potential_target:
            print("Error on target definition")
            return False
        else:
            target_found = potential_target
    if not originalcmd:
        print("Connecting to: " + target_found[1] + "...")
    
    # Prepare variables
    date       = datetime.today().strftime('%Y/%m/%d')
    targetname = target_found[1]
    target     = target_found[2]
    login      = get(url_passhport + "target" + "/login/" + \
                 targetname)
    # If target login is set at $email => 
    # we user login=username (without @...)
    if login == "$email":
        login  = re.split("@", username)[0] 
    pathlog    = SCRIPT_LOGS_PATH + "/" + date + "/"
    # Create a log directory for this target
    if not os.path.isdir(pathlog):
        os.makedirs(pathlog)
    isodate    = datetime.now().isoformat().replace(":",""). \
                 replace("-","").split('.')[0]
    pid        = os.getpid()
    filename   = NODE_NAME + "-" + isodate + "-PID" + \
                 str(pid) + "-" + targetname + "-" + \
                 login + "@" + target + "-" + username
    filelog    = pathlog + filename
    port       = get(url_passhport + "target" + "/port/" +  
                 targetname)
    sshoptions = get(url_passhport + "target" + \
                  "/sshoptions/" + targetname)

    # Log the entry in database
    if scpcmd == False: 
        cmd = "ssh -t -p " + str(port) + \
              " " + login + '@' + target + \
              ' ' + sshoptions 
        if originalcmd:
            cmd = cmd + originalcmd
    else:
        cmd = originalcmd

    data= {"connectiondate" : isodate,
           "pid"            : pid,
           "connectioncmd"  : cmd,
           "logfilepath"    : pathlog,
           "logfilename"    : filename,
           "user"           : username,
           "target"         : targetname}

    # We log with this PID (will be the same than the ssh connection)
    r = post("logentry/create", data)

    # It's SCP if scpcmd is set, else ssh.
    if scpcmd == True: 
        if isinstance(originalcmd, str):
            scp.connect(target, filelog, login, sshoptions,
                        port, originalcmd)
        else:
            #originalcmd is not a string, it's a list of commands
            scp.specialconnect(target, filelog, login, sshoptions,
                               originalcmd)
    else:
        if not SSL:
            cert = "/dev/null"
        else:
            cert = SSL_CERTIFICAT
        # Standard SSH connection
        ssh.connect(target, filelog, login, port, sshoptions, pid,
                    url_passhport, cert, SSH_SCRIPT, username, originalcmd)

    return True


def build_targetnames_list(target_list):
    """Return a list with targets names only"""
    targetnames_list = []
    for each_target in target_list:
        if not UNIQ_TARGETS_ID:
            targetnames_list.append(each_target.split(" ", 1)[0]) # target name
        else:
            targetnames_list.append(each_target.split(" ",)[1])

    return targetnames_list


def build_targets_list(target_list):
    """ Return a list with targets names, hostnames and a number"""
    """ Globaly the list without comments """
    indexed_target_list = []
    number = 0
    for each_target in target_list:
        number = int(number) + 1
        if UNIQ_TARGETS_ID:
            number = each_target.split(" ", 1)[0] # target ID
            indexed_target_list.append(str(number) + " " + 
                                   each_target.split(" ")[1] + " " +
                                   " ".join(each_target.split(" ")[2:3]))
        else:
            indexed_target_list.append(str(number) + " " +
                                    each_target.split(" ", 1)[0] + " " +
                                    " ".join(each_target.split(" ")[1:2]))

    return indexed_target_list


def build_commented_targets_list(target_list, tabulations=0):
    """ Build a targets list in a readable and numbered list format"""
    indexed_target_list = []
    table = []
    number = 0
    for each_target in target_list:
        number = number + 1
        if not tabulations:
            indexed_target_list.append(str(number) + " " + each_target)
        else:
            line=[]
            if not UNIQ_TARGETS_ID:
                line.append(str(number))
                line.append(each_target.split(" ", 1)[0]) # target name
                line.append(" ".join(each_target.split(" ")[1:2])) # hostname
                line.append(" ".join(each_target.split(" ")[2:])) # comment
            else:
                line.append(each_target.split(" ", 1)[0]) # target ID
                line.append(each_target.split(" ")[1]) # target name
                line.append(" ".join(each_target.split(" ")[2:3])) # hostname
                line.append(" ".join(each_target.split(" ")[3:])) # comment
            table.append(line)

    if tabulations:
        indexed_target_list = tabulate(table, tablefmt="plain")

    return indexed_target_list


def direct_connection(username, url_passhport, target_list, originalcmd):
    """ Handle SCP connections and SSH direct commands connections """
    if ( re.sub("^scp ", "", originalcmd) == originalcmd ):
        # SSH direct command
        ssh_direct_command(username, url_passhport, target_list, originalcmd)
    else:
        scp_command(username, url_passhport, target_list, originalcmd)


def ssh_direct_command(username, url_passhport, target_list, originalcmd):
    """ Prepare and launch a direct ssh command/connection """
    splitcommand = originalcmd.split(" ")
    server = splitcommand[0]

    # Check rights access
    if server not in build_targetnames_list(target_list):
        sys.exit("Error: This server is not in your access list")

    if len(splitcommand) < 2:
        # if there is no command, we connect as normal ssh connection
        checkandconnect(build_targets_list(target_list), server, username, 
                        "")
    else:
        # else we remove the target name
        checkandconnect(build_targets_list(target_list), server, username, 
                        re.sub("^" + server + " ", "", originalcmd))


def scp_command(username, url_passhport, target_list, originalcmd):
    """ Prepare and launch the scp """
    parsedcommand = scp.parse(originalcmd)
    if parsedcommand:
        if len(parsedcommand) > 1:
            choice       = parsedcommand[0] # the target
            command      = parsedcommand[1] # the rewrited command
            shortcmd     = " ".join(command.split(" ")[:-2]) # without path
            path         = command.split(" ")[-1] # the path, usefull in -f
            copyway      = command.split(" ")[-2] # -t or -f 
            finalpath    = parsedcommand[2] # The path to copy the file
            next_user    = parsedcommand[3] # Potential next target user
            next_target  = parsedcommand[4] # Potential next target hostname

            if not (next_user and next_target):
                # Simple scp, setting scpcmd flag at true
                checkandconnect(indexed_target_list, choice, 
                                username, command, True)

            elif SCP_THROUGH_TARGET:
                # There is a scp through a target (ie: player)
                # Warning: this is a dangerous action since we do a "rm -rf"
                # Command on the proxy target. DO NOT MODIFY THIS.
                
                # 1. Create an unique temporary directory on the "proxy" target
                tmpdir   = "/tmp/passhport-" + next_user + \
                           "@" +next_target + "-" + str(uuid.uuid4()) 
                mktmpdir = "mkdir -p " + tmpdir

                # 2. copy the file(s) into this proxy temp directory
                if copyway == "-t":
                    # if we send a file we copy the sent file on target
                    sshcmd1 = shortcmd +  " " + copyway + " " + tmpdir
                    # 3. We launch a scp on the target to the final destination
                    sshcmd2 = shortcmd + " " + tmpdir + "/* " + \
                             next_user + "@" + next_target + ":" + \
                             finalpath
                    # actually doing it
                    checkandconnect(indexed_target_list, choice, 
                                username, mktmpdir, False)
                    checkandconnect(indexed_target_list, choice, 
                                    username, sshcmd1, True)
                    checkandconnect(indexed_target_list, choice,
                                    username, sshcmd2, False)

                if copyway == "-f":
                    # if we receive a file we copy the wanted file(s) from 
                    # the distant server to the temporary directory
                    # Then send the files in the temporary directory to the
                    # client
                    # This actions have to be done in one unique command
                    # to work with ssh behavior (else ssh never answer)
                    sshcmd1 = shortcmd + " -q " + next_user + "@" + \
                              next_target + ":" + path + " " + tmpdir + "/"
                    sshcmd2 = shortcmd + " -q " + copyway + " " + tmpdir + "/*"
                    # for this, ssh needs one unique and muted connection
                    # so we will execute one unique big command
                    checkandconnect(indexed_target_list, choice,
                                    username, [mktmpdir, sshcmd1, sshcmd2], 
                                    True)

                # 4. We remove the intermediary files
                if "/tmp/passhport-" in tmpdir:
                    if " " not in tmpdir:
                        # This tmpdir should NEVER have a space
                        rmtmpdir = "rm -rf " + tmpdir
                        checkandconnect(indexed_target_list, choice, 
                                        username, rmtmpdir, False)
                else:
                    # This should never happen
                    print("WARNING: PaSSHport didn't remove the " + \
                          "temporary file on the target.")
            else:
                print(" This type of copy is disabled by configuration.")

    else:
        sys.exit()


### MAIN ###
if __name__ == '__main__':
    signal.signal(signal.SIGINT, signal_handler)

    username = sys.argv[1]
    url_passhport = "http" + conf.getboolean("SSL", "SSL")*"s" + \
                    "://" + conf.get("Network", "PASSHPORTD_HOSTNAME") + \
                    ":" + conf.get("Network", "PORT") + "/"
    if UNIQ_TARGETS_ID:
        accessible_targets = "/accessible_idtargets/"
    else:
        accessible_targets = "/accessible_targets/"
    try:
        target_list = get(url_passhport + "user" + accessible_targets + \
                      username).split("\n")
    except AttributeError as e:
        sys.exit("No such user in PaSSHport database.\n" +
                 "tip: it can be a SSL certificate misconfiguration.")
    originalcmd = os.environ.get('SSH_ORIGINAL_COMMAND')
    choice = 0
 
    # If the user can't access any target
    if target_list == [u'']:
        sys.exit("Sorry you can't access any server") 

    #Construct the indexted targets list
    indexed_target_list = build_targets_list(target_list)

    # Check if it's interactive ssh or another type of connection:
    if originalcmd:
        # In case the SSH_ORIGINAL_COMMAND is set,
        # it should be scp/rsync (according to sshd manpage)
        # After testing, it can be ssh with a direct command too...
        direct_connection(username, url_passhport, target_list, originalcmd)

    else:
        # We handle the interactive ssh connection
        print("Welcome {}.".format(username))
        ugroups = get(url_passhport + "user/attachedto/usergroup/" + \
                  username)
        if ugroups != "":
            print("You are currently attached to this usergroups:\n" + ugroups)

        print("Here is the list of servers you can access:")

        # Print servers the user can access, 
        # with a blank line between each entry
        print(build_commented_targets_list(target_list, tabulations=1))


        # Prepare completion system with a simplified targetname list
        t = completer.tabCompleter()
        t.createListCompleter(build_targetnames_list(target_list))
        readline.set_completer_delims('\t')
        readline.parse_and_bind("tab: complete")
        readline.set_completer(t.listCompleter)

        # Let the use chose his server
        try:
            choice = input("Type the number, name or hostname of the " + \
                        "server you want to connect to: ").rstrip().casefold()
        except EOFError:
            print("\nExiting at your own sweet will.")
            sys.exit(0)

        valid_input = False

        # Try to connect the user to the server he choosed or ask to re-type
        while not checkandconnect(indexed_target_list, choice, 
                                  username, originalcmd):
            print("You didn't type correctly, please try again.\n")
            try:
                choice = input("Type the number, name or hostname of the " + \
                        "server you want to connect to: ").rstrip().casefold()
            except EOFError:
                print("\nExiting at your own sweet will.")
                sys.exit(0)
